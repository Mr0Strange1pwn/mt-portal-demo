{"version":3,"sources":["site/LogIn.js","component/Render.js","App.js","serviceWorker.js","index.js","shupportFiles/images/img-02.png"],"names":["LogIn","useState","display","setDisplay","Fragment","className","data-tilt","src","img","alt","data-validate","type","name","placeholder","aria-hidden","pattern","onFocus","onBlur","id","href","Render","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"gRAkGeA,EA/FD,WAAO,IAAD,EACYC,oBAAS,GADrB,mBACXC,EADW,KACFC,EADE,KAGlB,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKC,UAAU,WACb,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,uBAAuBC,aAAA,GACpC,yBAAKC,IAAKC,IAAKC,IAAI,SAGrB,0BAAMJ,UAAU,+BACd,0BAAMA,UAAU,uBAAhB,gBAEA,yBACEA,UAAU,+BACVK,gBAAc,uCAEd,2BACEL,UAAU,WACVM,KAAK,OACLC,KAAK,QACLC,YAAY,UAEd,0BAAMR,UAAU,mBAChB,0BAAMA,UAAU,mBACd,uBAAGA,UAAU,iBAAiBS,cAAY,WAI9C,yBACET,UAAU,+BACVK,gBAAc,wBAEd,2BACEL,UAAU,WACVM,KAAK,WACLC,KAAK,OACLC,YAAY,WACZE,QAAQ,uCACRC,QAAS,kBAAMb,GAAW,IAC1Bc,OAAQ,kBAAMd,GAAW,MAE3B,0BAAME,UAAU,mBAChB,0BAAMA,UAAU,mBACd,uBAAGA,UAAU,aAAaS,cAAY,WAGzCZ,EACC,yBAAKgB,GAAG,WACL,IACD,oEACA,uBAAGA,GAAG,SAASb,UAAU,WAAzB,KACI,wCADJ,WAGA,uBAAGa,GAAG,UAAUb,UAAU,WAA1B,KACI,kDADJ,WAGA,uBAAGa,GAAG,SAASb,UAAU,WAAzB,KACI,sCAEJ,uBAAGa,GAAG,SAASb,UAAU,WAAzB,WACU,6CAGV,KACJ,yBAAKA,UAAU,+BACb,4BAAQA,UAAU,qBAAlB,UAGF,yBAAKA,UAAU,sBACb,0BAAMA,UAAU,QAAhB,UACA,uBAAGA,UAAU,OAAOc,KAAK,KAAzB,yBAKF,yBAAKd,UAAU,uBACb,uBAAGA,UAAU,OAAOc,KAAK,KAAzB,sBAEE,uBACEd,UAAU,+BACVS,cAAY,iBCzEjBM,EAVA,WACb,OACE,kBAAC,IAAMhB,SAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,SCOOiB,MAVf,WACE,OACE,yBAAKhB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCIYiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.a6277127.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport img from \"../shupportFiles/images/img-02.png\";\r\n\r\nconst LogIn = () => {\r\n  const [display, setDisplay] = useState(false);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"limiter\">\r\n        <div className=\"container-login100\">\r\n          <div className=\"wrap-login100\">\r\n            <div className=\"login100-pic js-tilt\" data-tilt>\r\n              <img src={img} alt=\"IMG\" />\r\n            </div>\r\n\r\n            <form className=\"login100-form validate-form\">\r\n              <span className=\"login100-form-title\">Member Login</span>\r\n\r\n              <div\r\n                className=\"wrap-input100 validate-input\"\r\n                data-validate=\"Valid email is required: ex@abc.xyz\"\r\n              >\r\n                <input\r\n                  className=\"input100\"\r\n                  type=\"text\"\r\n                  name=\"email\"\r\n                  placeholder=\"Email\"\r\n                />\r\n                <span className=\"focus-input100\"></span>\r\n                <span className=\"symbol-input100\">\r\n                  <i className=\"fa fa-envelope\" aria-hidden=\"true\"></i>\r\n                </span>\r\n              </div>\r\n\r\n              <div\r\n                className=\"wrap-input100 validate-input\"\r\n                data-validate=\"Password is required\"\r\n              >\r\n                <input\r\n                  className=\"input100\"\r\n                  type=\"password\"\r\n                  name=\"pass\"\r\n                  placeholder=\"Password\"\r\n                  pattern=\"(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}\"\r\n                  onFocus={() => setDisplay(true)}\r\n                  onBlur={() => setDisplay(false)}\r\n                />\r\n                <span className=\"focus-input100\"></span>\r\n                <span className=\"symbol-input100\">\r\n                  <i className=\"fa fa-lock\" aria-hidden=\"true\"></i>\r\n                </span>\r\n              </div>\r\n              {display ? (\r\n                <div id=\"message\">\r\n                  {\" \"}\r\n                  <h3>Password must contain the following:</h3>\r\n                  <p id=\"letter\" className=\"invalid\">\r\n                    A <b>lowercase</b> letter\r\n                  </p>\r\n                  <p id=\"capital\" className=\"invalid\">\r\n                    A <b>capital (uppercase)</b> letter\r\n                  </p>\r\n                  <p id=\"number\" className=\"invalid\">\r\n                    A <b>number</b>\r\n                  </p>\r\n                  <p id=\"length\" className=\"invalid\">\r\n                    Minimum <b>8 characters</b>\r\n                  </p>\r\n                </div>\r\n              ) : null}\r\n              <div className=\"container-login100-form-btn\">\r\n                <button className=\"login100-form-btn\">Login</button>\r\n              </div>\r\n\r\n              <div className=\"text-center p-t-12\">\r\n                <span className=\"txt1\">Forgot</span>\r\n                <a className=\"txt2\" href=\"#\">\r\n                  Username / Password?\r\n                </a>\r\n              </div>\r\n\r\n              <div className=\"text-center p-t-136\">\r\n                <a className=\"txt2\" href=\"#\">\r\n                  Create your Account\r\n                  <i\r\n                    className=\"fa fa-long-arrow-right m-l-5\"\r\n                    aria-hidden=\"true\"\r\n                  ></i>\r\n                </a>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default LogIn;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Link, Route } from \"react-router-dom\";\r\nimport LogIn from \"../site/LogIn\";\r\nconst Render = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <Router>\r\n        <LogIn />\r\n      </Router>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Render;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Render from \"./component/Render\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Render />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/img-02.cc17bc2b.png\";"],"sourceRoot":""}